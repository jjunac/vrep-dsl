/*
 * generated by Xtext 2.14.0
 */
package org.robot.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConnect_toKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConnectionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConnectionConnectionParserRuleCall_3_1_0 = (RuleCall)cConnectionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScenariiKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cScenariiAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cScenariiScenarioParserRuleCall_4_2_0 = (RuleCall)cScenariiAssignment_4_2.eContents().get(0);
		private final Assignment cScenariiAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cScenariiScenarioParserRuleCall_4_3_0 = (RuleCall)cScenariiAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cGlobalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGlobalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGlobalStatementBlockParserRuleCall_6_0 = (RuleCall)cGlobalAssignment_6.eContents().get(0);
		private final Keyword cInitialKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInitialAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cInitialScenarioCrossReference_8_0 = (CrossReference)cInitialAssignment_8.eContents().get(0);
		private final RuleCall cInitialScenarioEStringParserRuleCall_8_0_1 = (RuleCall)cInitialScenarioCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Robot:
		//	'Robot'
		//	name=EString
		//	'{' ('connect_to' connection=Connection)? ('scenarii' '{' scenarii+=Scenario scenarii+=Scenario* '}')?
		//	'global' global=StatementBlock
		//	'initial' initial=[Scenario|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=EString '{' ('connect_to' connection=Connection)? ('scenarii' '{' scenarii+=Scenario scenarii+=Scenario*
		//'}')? 'global' global=StatementBlock 'initial' initial=[Scenario|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('connect_to' connection=Connection)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'connect_to'
		public Keyword getConnect_toKeyword_3_0() { return cConnect_toKeyword_3_0; }
		
		//connection=Connection
		public Assignment getConnectionAssignment_3_1() { return cConnectionAssignment_3_1; }
		
		//Connection
		public RuleCall getConnectionConnectionParserRuleCall_3_1_0() { return cConnectionConnectionParserRuleCall_3_1_0; }
		
		//('scenarii' '{' scenarii+=Scenario scenarii+=Scenario* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'scenarii'
		public Keyword getScenariiKeyword_4_0() { return cScenariiKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//scenarii+=Scenario
		public Assignment getScenariiAssignment_4_2() { return cScenariiAssignment_4_2; }
		
		//Scenario
		public RuleCall getScenariiScenarioParserRuleCall_4_2_0() { return cScenariiScenarioParserRuleCall_4_2_0; }
		
		//scenarii+=Scenario*
		public Assignment getScenariiAssignment_4_3() { return cScenariiAssignment_4_3; }
		
		//Scenario
		public RuleCall getScenariiScenarioParserRuleCall_4_3_0() { return cScenariiScenarioParserRuleCall_4_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'global'
		public Keyword getGlobalKeyword_5() { return cGlobalKeyword_5; }
		
		//global=StatementBlock
		public Assignment getGlobalAssignment_6() { return cGlobalAssignment_6; }
		
		//StatementBlock
		public RuleCall getGlobalStatementBlockParserRuleCall_6_0() { return cGlobalStatementBlockParserRuleCall_6_0; }
		
		//'initial'
		public Keyword getInitialKeyword_7() { return cInitialKeyword_7; }
		
		//initial=[Scenario|EString]
		public Assignment getInitialAssignment_8() { return cInitialAssignment_8; }
		
		//[Scenario|EString]
		public CrossReference getInitialScenarioCrossReference_8_0() { return cInitialScenarioCrossReference_8_0; }
		
		//EString
		public RuleCall getInitialScenarioEStringParserRuleCall_8_0_1() { return cInitialScenarioEStringParserRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIpEStringParserRuleCall_1_0 = (RuleCall)cIpAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortINTTerminalRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		
		//Connection:
		//	{Connection} ip=EString ':' port=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Connection} ip=EString ':' port=INT
		public Group getGroup() { return cGroup; }
		
		//{Connection}
		public Action getConnectionAction_0() { return cConnectionAction_0; }
		
		//ip=EString
		public Assignment getIpAssignment_1() { return cIpAssignment_1; }
		
		//EString
		public RuleCall getIpEStringParserRuleCall_1_0() { return cIpEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//port=INT
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_3_0() { return cPortINTTerminalRuleCall_3_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScenarioAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cStatementBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementBlockStatementBlockParserRuleCall_3_0 = (RuleCall)cStatementBlockAssignment_3.eContents().get(0);
		
		//Scenario:
		//	{Scenario}
		//	'Scenario'
		//	name=EString
		//	statementBlock=StatementBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{Scenario} 'Scenario' name=EString statementBlock=StatementBlock
		public Group getGroup() { return cGroup; }
		
		//{Scenario}
		public Action getScenarioAction_0() { return cScenarioAction_0; }
		
		//'Scenario'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//statementBlock=StatementBlock
		public Assignment getStatementBlockAssignment_3() { return cStatementBlockAssignment_3; }
		
		//StatementBlock
		public RuleCall getStatementBlockStatementBlockParserRuleCall_3_0() { return cStatementBlockStatementBlockParserRuleCall_3_0; }
	}
	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StatementBlock:
		//	{StatementBlock}
		//	'{' (statements+=Statement statements+=Statement*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementBlock} '{' (statements+=Statement statements+=Statement*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{StatementBlock}
		public Action getStatementBlockAction_0() { return cStatementBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(statements+=Statement statements+=Statement*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_1_0() { return cStatementsStatementParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.Condition");
		private final RuleCall cBallAheadConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	BallAheadCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//BallAheadCondition
		public RuleCall getBallAheadConditionParserRuleCall() { return cBallAheadConditionParserRuleCall; }
	}
	public class BallAheadConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.BallAheadCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBallAheadConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBall_aheadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BallAheadCondition:
		//	{BallAheadCondition}
		//	'ball_ahead';
		@Override public ParserRule getRule() { return rule; }
		
		//{BallAheadCondition} 'ball_ahead'
		public Group getGroup() { return cGroup; }
		
		//{BallAheadCondition}
		public Action getBallAheadConditionAction_0() { return cBallAheadConditionAction_0; }
		
		//'ball_ahead'
		public Keyword getBall_aheadKeyword_1() { return cBall_aheadKeyword_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForwardStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExecuteStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrintStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	ForwardStatement | ExecuteStatement | PrintStatement | ConditionalStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//ForwardStatement | ExecuteStatement | PrintStatement | ConditionalStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ForwardStatement
		public RuleCall getForwardStatementParserRuleCall_0() { return cForwardStatementParserRuleCall_0; }
		
		//ExecuteStatement
		public RuleCall getExecuteStatementParserRuleCall_1() { return cExecuteStatementParserRuleCall_1; }
		
		//PrintStatement
		public RuleCall getPrintStatementParserRuleCall_2() { return cPrintStatementParserRuleCall_2; }
		
		//ConditionalStatement
		public RuleCall getConditionalStatementParserRuleCall_3() { return cConditionalStatementParserRuleCall_3; }
	}
	public class ForwardStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.ForwardStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ForwardStatement:
		//	{ForwardStatement}
		//	'forward';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForwardStatement} 'forward'
		public Group getGroup() { return cGroup; }
		
		//{ForwardStatement}
		public Action getForwardStatementAction_0() { return cForwardStatementAction_0; }
		
		//'forward'
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
	}
	public class PrintStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.PrintStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//PrintStatement:
		//	{PrintStatement}
		//	'print' text=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintStatement} 'print' text=EString
		public Group getGroup() { return cGroup; }
		
		//{PrintStatement}
		public Action getPrintStatementAction_0() { return cPrintStatementAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }
	}
	public class ExecuteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.ExecuteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecuteStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExecuteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestinationScenarioCrossReference_2_0 = (CrossReference)cDestinationAssignment_2.eContents().get(0);
		private final RuleCall cDestinationScenarioEStringParserRuleCall_2_0_1 = (RuleCall)cDestinationScenarioCrossReference_2_0.eContents().get(1);
		
		//ExecuteStatement:
		//	{ExecuteStatement}
		//	'execute' destination=[Scenario|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecuteStatement} 'execute' destination=[Scenario|EString]
		public Group getGroup() { return cGroup; }
		
		//{ExecuteStatement}
		public Action getExecuteStatementAction_0() { return cExecuteStatementAction_0; }
		
		//'execute'
		public Keyword getExecuteKeyword_1() { return cExecuteKeyword_1; }
		
		//destination=[Scenario|EString]
		public Assignment getDestinationAssignment_2() { return cDestinationAssignment_2; }
		
		//[Scenario|EString]
		public CrossReference getDestinationScenarioCrossReference_2_0() { return cDestinationScenarioCrossReference_2_0; }
		
		//EString
		public RuleCall getDestinationScenarioEStringParserRuleCall_2_0_1() { return cDestinationScenarioEStringParserRuleCall_2_0_1; }
	}
	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.ConditionalStatement");
		private final RuleCall cUntilStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionalStatement:
		//	UntilStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//UntilStatement
		public RuleCall getUntilStatementParserRuleCall() { return cUntilStatementParserRuleCall; }
	}
	public class UntilStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.robot.dsl.RobotDsl.UntilStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUntilStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUntilKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cStatementBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementBlockStatementBlockParserRuleCall_3_0 = (RuleCall)cStatementBlockAssignment_3.eContents().get(0);
		
		//UntilStatement:
		//	{UntilStatement}
		//	'until' condition=Condition
		//	statementBlock=StatementBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{UntilStatement} 'until' condition=Condition statementBlock=StatementBlock
		public Group getGroup() { return cGroup; }
		
		//{UntilStatement}
		public Action getUntilStatementAction_0() { return cUntilStatementAction_0; }
		
		//'until'
		public Keyword getUntilKeyword_1() { return cUntilKeyword_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//statementBlock=StatementBlock
		public Assignment getStatementBlockAssignment_3() { return cStatementBlockAssignment_3; }
		
		//StatementBlock
		public RuleCall getStatementBlockStatementBlockParserRuleCall_3_0() { return cStatementBlockStatementBlockParserRuleCall_3_0; }
	}
	
	
	private final RobotElements pRobot;
	private final EStringElements pEString;
	private final ConnectionElements pConnection;
	private final ScenarioElements pScenario;
	private final StatementBlockElements pStatementBlock;
	private final ConditionElements pCondition;
	private final BallAheadConditionElements pBallAheadCondition;
	private final StatementElements pStatement;
	private final ForwardStatementElements pForwardStatement;
	private final PrintStatementElements pPrintStatement;
	private final ExecuteStatementElements pExecuteStatement;
	private final ConditionalStatementElements pConditionalStatement;
	private final UntilStatementElements pUntilStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pEString = new EStringElements();
		this.pConnection = new ConnectionElements();
		this.pScenario = new ScenarioElements();
		this.pStatementBlock = new StatementBlockElements();
		this.pCondition = new ConditionElements();
		this.pBallAheadCondition = new BallAheadConditionElements();
		this.pStatement = new StatementElements();
		this.pForwardStatement = new ForwardStatementElements();
		this.pPrintStatement = new PrintStatementElements();
		this.pExecuteStatement = new ExecuteStatementElements();
		this.pConditionalStatement = new ConditionalStatementElements();
		this.pUntilStatement = new UntilStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.robot.dsl.RobotDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	'Robot'
	//	name=EString
	//	'{' ('connect_to' connection=Connection)? ('scenarii' '{' scenarii+=Scenario scenarii+=Scenario* '}')?
	//	'global' global=StatementBlock
	//	'initial' initial=[Scenario|EString]
	//	'}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Connection:
	//	{Connection} ip=EString ':' port=INT;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//Scenario:
	//	{Scenario}
	//	'Scenario'
	//	name=EString
	//	statementBlock=StatementBlock;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//StatementBlock:
	//	{StatementBlock}
	//	'{' (statements+=Statement statements+=Statement*)?
	//	'}';
	public StatementBlockElements getStatementBlockAccess() {
		return pStatementBlock;
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}
	
	//Condition:
	//	BallAheadCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//BallAheadCondition:
	//	{BallAheadCondition}
	//	'ball_ahead';
	public BallAheadConditionElements getBallAheadConditionAccess() {
		return pBallAheadCondition;
	}
	
	public ParserRule getBallAheadConditionRule() {
		return getBallAheadConditionAccess().getRule();
	}
	
	//Statement:
	//	ForwardStatement | ExecuteStatement | PrintStatement | ConditionalStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ForwardStatement:
	//	{ForwardStatement}
	//	'forward';
	public ForwardStatementElements getForwardStatementAccess() {
		return pForwardStatement;
	}
	
	public ParserRule getForwardStatementRule() {
		return getForwardStatementAccess().getRule();
	}
	
	//PrintStatement:
	//	{PrintStatement}
	//	'print' text=EString;
	public PrintStatementElements getPrintStatementAccess() {
		return pPrintStatement;
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//ExecuteStatement:
	//	{ExecuteStatement}
	//	'execute' destination=[Scenario|EString];
	public ExecuteStatementElements getExecuteStatementAccess() {
		return pExecuteStatement;
	}
	
	public ParserRule getExecuteStatementRule() {
		return getExecuteStatementAccess().getRule();
	}
	
	//ConditionalStatement:
	//	UntilStatement;
	public ConditionalStatementElements getConditionalStatementAccess() {
		return pConditionalStatement;
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}
	
	//UntilStatement:
	//	{UntilStatement}
	//	'until' condition=Condition
	//	statementBlock=StatementBlock;
	public UntilStatementElements getUntilStatementAccess() {
		return pUntilStatement;
	}
	
	public ParserRule getUntilStatementRule() {
		return getUntilStatementAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
