/*
 * generated by Xtext 2.14.0
 */
package org.robot.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.robot.dsl.services.RobotDslGrammarAccess;
import org.robot.model.robot.BallAheadCondition;
import org.robot.model.robot.ExecuteStatement;
import org.robot.model.robot.ForwardStatement;
import org.robot.model.robot.PrintStatement;
import org.robot.model.robot.Robot;
import org.robot.model.robot.RobotPackage;
import org.robot.model.robot.Scenario;
import org.robot.model.robot.UntilStatement;

@SuppressWarnings("all")
public class RobotDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RobotDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RobotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RobotPackage.BALL_AHEAD_CONDITION:
				sequence_BallAheadCondition(context, (BallAheadCondition) semanticObject); 
				return; 
			case RobotPackage.EXECUTE_STATEMENT:
				sequence_ExecuteStatement(context, (ExecuteStatement) semanticObject); 
				return; 
			case RobotPackage.FORWARD_STATEMENT:
				sequence_ForwardStatement(context, (ForwardStatement) semanticObject); 
				return; 
			case RobotPackage.PRINT_STATEMENT:
				sequence_PrintStatement(context, (PrintStatement) semanticObject); 
				return; 
			case RobotPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case RobotPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case RobotPackage.UNTIL_STATEMENT:
				sequence_UntilStatement(context, (UntilStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Condition returns BallAheadCondition
	 *     BallAheadCondition returns BallAheadCondition
	 *
	 * Constraint:
	 *     {BallAheadCondition}
	 */
	protected void sequence_BallAheadCondition(ISerializationContext context, BallAheadCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ExecuteStatement
	 *     ExecuteStatement returns ExecuteStatement
	 *
	 * Constraint:
	 *     destination=[Scenario|EString]
	 */
	protected void sequence_ExecuteStatement(ISerializationContext context, ExecuteStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotPackage.Literals.EXECUTE_STATEMENT__DESTINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotPackage.Literals.EXECUTE_STATEMENT__DESTINATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecuteStatementAccess().getDestinationScenarioEStringParserRuleCall_2_0_1(), semanticObject.eGet(RobotPackage.Literals.EXECUTE_STATEMENT__DESTINATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ForwardStatement
	 *     ForwardStatement returns ForwardStatement
	 *
	 * Constraint:
	 *     {ForwardStatement}
	 */
	protected void sequence_ForwardStatement(ISerializationContext context, ForwardStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns PrintStatement
	 *     PrintStatement returns PrintStatement
	 *
	 * Constraint:
	 *     text=EString
	 */
	protected void sequence_PrintStatement(ISerializationContext context, PrintStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotPackage.Literals.PRINT_STATEMENT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotPackage.Literals.PRINT_STATEMENT__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintStatementAccess().getTextEStringParserRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=EString (scenarii+=Scenario scenarii+=Scenario*)? global=Scenario initial=[Scenario|EString])
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=EString (statements+=Statement statements+=Statement*)?)
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns UntilStatement
	 *     ConditionalStatement returns UntilStatement
	 *     UntilStatement returns UntilStatement
	 *
	 * Constraint:
	 *     (condition=Condition statements+=Statement statements+=Statement*)
	 */
	protected void sequence_UntilStatement(ISerializationContext context, UntilStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
