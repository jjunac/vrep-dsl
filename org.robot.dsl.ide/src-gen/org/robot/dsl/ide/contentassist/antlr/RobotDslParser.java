/*
 * generated by Xtext 2.14.0
 */
package org.robot.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.robot.dsl.ide.contentassist.antlr.internal.InternalRobotDslParser;
import org.robot.dsl.services.RobotDslGrammarAccess;

public class RobotDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RobotDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RobotDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
			builder.put(grammarAccess.getRobotAccess().getGroup_4(), "rule__Robot__Group_4__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_4(), "rule__Scenario__Group_4__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_4_3(), "rule__Scenario__Group_4_3__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
			builder.put(grammarAccess.getStateAccess().getGroup_5(), "rule__State__Group_5__0");
			builder.put(grammarAccess.getStateAccess().getGroup_5_3(), "rule__State__Group_5_3__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getRobotAccess().getNameAssignment_2(), "rule__Robot__NameAssignment_2");
			builder.put(grammarAccess.getRobotAccess().getScenarioAssignment_4_1(), "rule__Robot__ScenarioAssignment_4_1");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_2(), "rule__Scenario__NameAssignment_2");
			builder.put(grammarAccess.getScenarioAccess().getStatesAssignment_4_2(), "rule__Scenario__StatesAssignment_4_2");
			builder.put(grammarAccess.getScenarioAccess().getStatesAssignment_4_3_1(), "rule__Scenario__StatesAssignment_4_3_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
			builder.put(grammarAccess.getStateAccess().getDestinationAssignment_4_1(), "rule__State__DestinationAssignment_4_1");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_5_2(), "rule__State__ActionsAssignment_5_2");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_5_3_1(), "rule__State__ActionsAssignment_5_3_1");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_2(), "rule__Action__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RobotDslGrammarAccess grammarAccess;

	@Override
	protected InternalRobotDslParser createParser() {
		InternalRobotDslParser result = new InternalRobotDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
